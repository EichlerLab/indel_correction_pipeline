nNumberOfReadsPerPiece=10000000

import re
import glob
import os


# Always source config file.
SNAKEMAKE_DIR = os.path.dirname(workflow.snakefile)
shell.prefix(". {SNAKEMAKE_DIR}/config.sh; set -eo pipefail ; module load bwa/0.7.13; module load samtools/1.3;"  )

configfile: "align_illumina_against_reference_config.json"
TMP_DIR = config["tmp_dir"]
szAssembly = config["align_reads_to_this_fasta"]


assert os.path.exists( "pieces_forward" ), "directory pieces_forward and pieces_reverse must exist but doesn't.  See ~dgordon/pipelines/pilon/pilon_stage1.snake for how to create these"

assert os.path.exists( "pieces_reverse" ), "directory pieces_forward and pieces_reverse must exist but doesn't.  See ~dgordon/pipelines/pilon/pilon_stage1.snake for how to create these"


# read to find all little fastq files

# maybe remove aSamFiles and aForwardFiles

nReadNameType = -666 # make its scope global so functions can read it

aSamFiles = []
aForwardFiles = []
aUniqueIDs = []
for szFile in glob.glob( "pieces_forward/*" ):
        # looks like:
        # SRR3189761_1.fastq003
        aForwardFiles.append( szFile )
        aSamFiles.append( szFile + ".sam" )
        if( "forwards.fastq" in szFile ):
                szUniqueID = re.sub( "forwards.fastq", "", szFile )
                nReadNameType = 1
        elif ( "_1.fastq" in szFile ):
                szUniqueID = re.sub( r"_1.fastq", "_", szFile )
                nReadNameType = 2
        elif( "_1.fq" in szFile ):
                szUniqueID = re.sub( r"_1.fq", "_", szFile )
                nReadNameType = 3
        elif( "_forward.fastq" in szFile ):
                szUniqueID = re.sub( r"_forward.fastq", "_", szFile )
                nReadNameType = 4
        elif( "_forward.fq" in szFile ):
                szUniqueID = re.sub( r"_forward.fq", "_", szFile )
                nReadNameType = 5
        else:
                sys.exit( szFile + " name not in _1.fastq or _1.fq format" )


        szUniqueID = re.sub( r"pieces_forward/", "", szUniqueID )

        aUniqueIDs.append( szUniqueID )


# maybe I should check that the reverse files all exist


def szGetForwardLittleFastqFromUniqueID( wildcards ):


        # SRR3189761_1.fastq003
        # was converted to:
        # SRR3189761_003

        # I am concerned there might be additional underscores so I am
        # going to split on the last underscore

        szUniqueID = str( wildcards.uniqueID )
        nIndex = szUniqueID.rfind( "_" )

        szBefore = szUniqueID[0:nIndex]
        szAfter = szUniqueID[nIndex+1:]


        if ( nReadNameType == 1 ):
                szForwardFastq = "pieces_forward/forwards.fastq" + szUniqueID
        elif( nReadNameType == 2 ):
                szForwardFastq = "pieces_forward/" + szBefore + "_1.fastq" + szAfter
        elif( nReadNameType == 3 ):
                szForwardFastq = "pieces_forward/" + szBefore + "_1.fq" + szAfter
        elif( nReadNameType == 4 ):
                szForwardFastq = "pieces_forward/" + szBefore + "_forward.fastq" + szAfter
        elif( nReadNameType == 5 ):
                szForwardFastq = "pieces_forward/" + szBefore + "_forward.fq" + szAfter
        else:
                sys.exit(  "nReadNameType = {:d} but must be 1 to 5".format( nReadNameType ) )
                
        return szForwardFastq
        

def szGetReverseLittleFastqFromUniqueID( wildcards ):

        # SRR3189761_1.fastq003
        # was converted to:
        # SRR3189761_003

        # I am concerned there might be additional underscores so I am
        # going to split on the last underscore

        szUniqueID = str( wildcards.uniqueID )
        nIndex = szUniqueID.rfind( "_" )

        szBefore = szUniqueID[0:nIndex]
        szAfter = szUniqueID[nIndex+1:]


        if ( nReadNameType == 1 ):
                szReverseFastq = "pieces_reverse/reverses.fastq" + szUniqueID
        elif( nReadNameType == 2 ):
                szReverseFastq = "pieces_reverse/" + szBefore + "_2.fastq" + szAfter
        elif( nReadNameType == 3 ):
                szReverseFastq = "pieces_reverse/" + szBefore + "_2.fq" + szAfter
        elif( nReadNameType == 4 ):
                szReverseFastq = "pieces_reverse/" + szBefore + "_reverse.fastq" + szAfter
        elif( nReadNameType == 5 ):
                szReverseFastq = "pieces_reverse/" + szBefore + "_reverse.fq" + szAfter
        else:
                sys.exit(  "nReadNameType = {:d} but must be 1 to 5".format( nReadNameType ) )
                
        return szReverseFastq



rule all:
     input:  "illumina_vs_assembly.sorted.bam.bai"


# rule makeQuiveredAssemblyFai:
# 	input: szAssembly
# 	output: "%s.fai" % szAssembly
# 	params: sge_opts="-l mfree=5G -l h_rt=20:00:00 -q eichler-short.q"
# 	run:
# 		szCommand = "samtools faidx " + szAssembly
# 		print( "about to execute: " + szCommand )
# 		shell( szCommand )


rule makeBamBai:
	input: "illumina_vs_assembly.sorted.bam"
	output: protected( "illumina_vs_assembly.sorted.bam.bai" )
	params: sge_opts="-l mfree=5G -l h_rt=150:00:00 -q eichler-short.q"
	run:
		szCommand = "samtools index " + str( input )
		print( "about to execute: " + szCommand )
		shell( szCommand )


rule sortBamFile:
	input: "illumina_vs_assembly.bam"
	output: protected( "illumina_vs_assembly.sorted.bam" )
	params: sge_opts="-R y -pe serial 10 -l mfree=5G -l h_rt=150:00:00 -q eichler-short.q"
	run:
		szCommand = "samtools sort " + str( input ) + " -@ 16 -T " + TMP_DIR + " -o " + str( output )
		print( "about to execute: " + szCommand )
		shell( szCommand )

rule combineBamFiles:
	output: "illumina_vs_assembly.bam"
	input: expand( "pieces_bam/{uniqueID}.sorted.bam", uniqueID = aUniqueIDs )
	params: sge_opts="-R y -l mfree=80G -l h_rt=144:00:00 -q eichler-short.q"
	run:
		szCommand = "samtools merge " + str( output ) + " pieces_bam/*.sorted.bam"
		print( "about to execute: " + szCommand )
		shell( szCommand )


rule convertOneSamToOneBam:
	output: "pieces_bam/{uniqueID}.sorted.bam"
	input:  "pieces_sam/{uniqueID}.sam"
	params: sge_opts="-l mfree=10G -l h_rt=8:00:00 -q eichler-short.q"
	run:
		szCommand = "mkdir -p " + TMP_DIR + " && samtools view -b -@ 10 " + str( input ) + " | samtools sort - -@ 10 -T " + TMP_DIR + " -o " + str( output )
		print( "about to execute: " + szCommand )
		shell( szCommand )

rule runBwaOneFile:
	output: "pieces_sam/{uniqueID}.sam"
	input: szGetForwardLittleFastqFromUniqueID, szGetReverseLittleFastqFromUniqueID, "%s.bwt" % szAssembly
	params: sge_opts="-pe serial 10 -l mfree=2G -l h_rt=8:00:00 -q eichler-short.q"
	run:
        # fixed Oct 27, 2016.  should not have -p since have
        # both forward and reverse
		szCommand = "bwa mem -t 10 " + szAssembly + " " + str( input[0] ) + " " + str( input[1] ) + " >" + str( output )
		print( "about to execute: " + szCommand )
		shell( szCommand )

rule  prepare_index_for_bwa:
	input: szAssembly
	output: "%s.bwt" % szAssembly
	params: sge_opts="-R y -l mfree=30G -l h_rt=8:00:00 -q eichler-short.q"
	run:
		szCommand = "bwa index " + str( input )
		print( "about to execute: " + szCommand )
		shell( szCommand )
